#+STARTUP: align fold hidestars indent
#+OPTIONS: H:7 num:t toc:t \n:nil stat:nil timestamp:nil html-postamble:nil inline-images:t

* Abstract

Bitcloud is a universal protocol aiming to provide a massive distributed
filesystem, or "virtual hark disk", capable of storing data encrypted and
signed across all connected nodes, protecting privacy and guaranteeing quality
of service (QoS).

The easiest way to understand Bitcloud is to think about it as a virtual
storage device, whose content is on the Internet in a distributed fashion,
and globally available with only the restrictions that the different participants
impose over the content they upload.

But not only that, Bitcloud differs from similar solutions like i2p, Freenet or
Maidsafe in some important factors:

1. Bitcloud intentionally provides the base for future Distributed
   Applications with economic incentives based on cryptocoins, with facilities
   to do escrow transactions and contract services.
2. Bitcloud do measurements of QoS, like for example bandwidth, storage and
   availability. The statistics are stored in a database in every node and
   synced and signed by consensus.
3. Bitcloud structures the storage of content in node grids, which are
   constituted by groups of nodes with a shared economical or social interest.
4. All the data is stored encrypted and sliced in small chunks, in such a way
   that individual nodes do not know what they are storing.
5. Data is stored redundantly is such a way that if 70% of the nodes switch
   off, still the data is retrievable by the users.
6. Gateways in Bitcloud transform the content stored and distributed across
   all nodes into something that users can view with existing tools. For
   example, a user can be accesing the Bitcloud with his/her web browser without
   even noticing that in fact the content comes from Bitcloud.
7. Bitcloud introduces the concept of publishers. They freely choose and pay
   the node grids for storing all of the content they approve. They also
   have the final say on whether or not the correct data has been sent to the
   user. Once the publisher confirms that the user has received the correct
   data, the escrow payment can be released.
8. Bitcloud also enables a special node grid called the "public grid", to
   which every node is free to take part in. This grid is censorship-resistant
   but separated from moderated grids to clearly improve the quality of those 
   who pay.
   

In addition to all of that, Bitcloud is overall a free protocol. In addition to
the design of the protocol, we provide a reference implementation under the
terms of the MIT License that intends to be very lightweight and is able to
run both on small devices and big clusters of nodes.



* Introduction

** Main participants

- Storage nodes
- Node grids
- Gateway nodes
- Publishers
- Users

With the following rules for users/publishers:

- The publishers grant access to users. Each publishers may have their
  own mechanisms to register users. Every user is attached to a publisher without
  exception. There cannot be users without publishers, so users must find a way
  to register into a publisher or become one. Anonymous users can be generated
  automatically in the publisher interface.
- Users can become publishers at any time, and should be as easy as soliciting
  an upgrade to the system and mine the CA.
- Users unconditionally must own a pair of keys (priv/public), and they
  are certificated by the publishers. This way, it is easy to discriminate
  between users of different publishers. For example, in the actual internet,
  users must register into different web services (forums, stores, email...),
  the same for Bitcloud. This provides a major step forward in scalability.
- Files and folders do always have a user owner. Permissions to access
  those files are imposed by the publisher in the first instance, and the
  users after that. For example, if a publisher grant full access for all
  the files of a certain user, then the user is able to grant read/write
  accesst o his files for other users/publishers.
- Publishers may impose a quota for the users for space, bandwidth,
  number of folders/files and other variables we can discuss.
- Publishers may or may not grant access to the user files for other
  publishers' users. They do so by trusting/revoking other publishers.
- Users don't have to know any of all the above mechanisms. Users interfaces
  and DAs will be in charge of providing a good user experience. Bitcloud is
  not in charge of that.

With the following rules for node grids:

- There is an owner for every node grid. The owner must be a CA corresponding
  to a running node.
- There are gateways, in charge of transforming the data from the bitcloud to
  something useful for the users, like http or ftp. Each node grid may have
  several gateways, at least one is required.
- Publishers negotiate contracts personally with node grid owners.  Bitcloud
  check the QoS of the grids and is in charge of escrow refunds/releases.

Taking in count both of the above group of rules, Publishers must run a
publisher client, in charge of registering users, find node grids to rent,
release escrows, etc. This publisher client can be run in the same machine as
a node, but it is independant of it. Publishers may also own an entry point
like a webpage or a place in a DA.

There is a special exception called the public grid. The public grid has NULL
as the publisher and QoS is not considered/checked. Every node is free to
attach or not to the public grid. The only incentive to maintain this public
grid is the content itself, which is free of censorship. But usually, the
quality is lower because it has no economic incentives.

    
** The routing process
# #+BEGIN_SRC plantuml :file "img/structure.png"
# node NodeGrid1 {
# node Gateway1
# node Gateway2
# database "Storage Nodes" as storage1 {
# node Node1
# node Node2
# node Node3
# node Node4
# }
# Gateway1 <-> storage1
# Gateway2 <-> storage1
# }
# node Publisher
# Publisher <-down-> NodeGrid1 : Escrow

# :User1:     <-> Gateway1
# :User1:     <-> Gateway2

# :User1:    <-> Publisher : DAO

# #+END_SRC

#+RESULTS:
[[file:img/structure.png]]


* Storage of the content

https://tahoe-lafs.org/trac/tahoe-lafs/browser/trunk/docs/architecture.rst

** Base

A Tahoe-LAFS filesystem with the following modifications baked in:

- A superset to the networking layer, where a mesh topology may be allowed.  Each storage node shall have a dedicated tunnel to an affiliated gateway.
- Each grid shall be defined by one or more gateways, which shall be certified in the overall bitcloud as certificate authorities
- Certificate authorities shall have the capability to merge their authorities by signing each others' certificates, thus providing redundancy of operations in case of one gateway going down
- Storage nodes may submit bids upon polling by a gateway for content slice hosting
- Content shall be stored in nodes with k-of-N encryption, based on the number of nodes required to effectively host the content of that size.
- Gateways shall mediate transactions between prospective content depositors and nodes, polling their associated nodes to determine the minimum price the grid can offer for the content storage for the guaranteed time period.
- Node QoS guarantees shall be adjudicated based on a node's contributions to a public grid, for which every CA shall be a valid gateway. This will require that nodes present a portion of their storage to the public grid. Public grid storage will have no particular guarantee beyond the node's desire to present good QoS figures.
- Gateways will account for and verify user downloads of content slices, reporting to the nodepool which nodes had successfully completed their obligations.
- Gateways will act as escrow agents to render payment credits to parties who have earned payments, if any.
- Gateways shall maintain certificate revocation lists to exclude malfunctioning or malicious nodes and gateways that would otherwise be associated with their grid.
- Nodes shall be required to associate with one or more affiliated gateways to be present on a grid.

Gateways will also be required for collections of users who do not wish to fulfill the requisites to act as CAs in their own right.

** Advantages:

- Measurement of a node's capability to serve content will be continuous and ongoing
- Free publication of content will be possible to allow underserved communities to be heard
- Publishers may solicit competing bids for hosting to allow market forces to provide guaranteed hosting according to expense of hosting
- Individual nodes will have no access to their served content, meaning sensitive or valuable information may be stored without worries it will be leaked or pirated.  
- With a k-of-N encryption scheme, nodes will not actually possess any content that may be problematic in their jurisdiction, as each node is restricted to one slice which is not possible to use to gain access to the content without k other slices
- Clusters of nodes tied to affiliated publishers may act towards a common interest, providing specialized content, making the job of those moderators who direct users to content much easier
- Expiring content hosting guarantees provide continuous income streams to nodes, thus attracting more nodes
- Multiple coexistent grids provide redundancy of operations in the event that some portion of nodes and/or gateways are unable to operate; nodes or gateways may affiliate with other grids in order to resume operations
- QoS measurements based on actual traffic provide historical trends for individual nodes. Nodes that attempt to game the system by means of Sibyls grabbing their hosted content, assuming they find a means of determining what that content is, will be 'buying' their improved rating due to having to gain the services of other, non-sibyled nodes. 
- Reliability of content retrieval is vastly increased due to the nature of k-of-N storage schemes, similar to how a RAID works
- Retrieval speed may be positively affected, similar to how bittorrent allows for vastly increased download speeds due to concurrently accessing slices of content spread across multiple users
- Accounting for individual downloads of content means charging for content becomes trivial to implement

** Disadvantages

- Controversial, harmful (malware) and illegal content will be posted on the public grid--though the source as far as the CA that authorized the user in question to post it will be determinable.
- Distributed CA registration will need to be difficult enough to make registration of a new CA expensive enough to encourage careful management of nodes and/or users
- Mesh topologies may suffer from reduced speed when tunneled through another content-serving node. Unexpected topological effects may result.
- Prospective scam nodes may be able to 'take the money and run' when issued content, taking payment for hosting and then disassociating from the grid. 

(N.B. that the "shall" and "may" used in the description section are according to RFC standards: SHALL and SHALL NOT are mandatory; MAY is optional)

* Certificate Authorities

Certificate authorities (CAs) certifies the ownership of public keys to relay
upon assertions to define trust/distrust relationships between components of
the system. The main uses are:

- To certify that a storage node is assigned to a gateway.
- To ensure that a storage node doesn't gain access to data it is not allowed
  to store.
- To certify the registration precedents of users, and therefore grant or deny
  access to specific content.
- To establish relationships between CAs that trust between them.
- To revoke access to malicious contenders.

** CA creation

Bitcloud does not use a classical centralized scheme in which only a few of CAs
are widely trusted. In contrast, every gateway and publisher is in charge of
generating its own CA and maintain a reputation in order to be accepted by the
community.

The Sybil attack is an attack wherein a reputation system is subverted by
forging identities in peer-to-peer networks at a high rate.

Classical centralized CA schemes avoid Sybil attacks by hosting
trusted/revoked certifications in already well-reputable certificate vendors,
at the expense of human resources to verify identity.

Bitcloud is an automatic decentralized storage system that intents to avoid
centralization, and relay in other means to verify correctness:

- By making it expensive to generate new acceptable CAs, a new gateway or
  publisher must "mine" their CA by soliciting a CPU/memory intensive problem to
  resolve and provide the solution associated with the CA generated.
- By maintaining a reputation of good QoS as promised.
- By staying online with good reputation, meaning that after a period of time
  offline the certificate is automatically revoked by the community.
- By providing a method of public/private individual revocation based on
  decisions from the publishers and gateways.
  
** CA trust/revocation

To encourage the accomplishment of the obligations, Bitcloud maintains a general
synced file called the Node Pool, with statistics associated with each precise
CA. Every node is in charge to publicly/privately trust or revoke other CAs
based on such statistics.

Revocations based on poor QoS are publicly published in the node pool. Private
decisions based on private concerns not associated with QoS are kept private
to the gateway or publisher.

When a gateway is offered to work for the public grid, private revocations
are not to be considered.

* Nodepool

The Nodepool is a relational database, synced by consensus, in which all the
statistics, information and contracts are stored.

[[http://www.sqlite.org/about.html][SQLite]] is the base for the following general reasons:

- It is lightweight.
- It can be embedded in mostly any language.
- It is free.
- It is secure.
- It is available in many platforms and devices, including small ones.

In addition to that, it has specific features very convenient:

- [[http://www.sqlite.org/capi3ref.html#sqlite3_set_authorizer][Compile-Time Authorization Callbacks]], that will allow to authorize or deny the
  execution of SQL code in the Sync process.
- [[http://www.sqlite.org/capi3ref.html#sqlite3_create_function][Custom creation/redefinition of SQL functions]], that will allow to base the
  Bitcloud language in SQL. For example, it will allow to insert functions to
  verify signatures in real time.
- File-based database for easy relocation of nodes.
- [[http://www.sqlite.org/capi3ref.html#sqlite3_blob_open][Incremental read/write of binaries in the database]], that will allow to store
  sliced contents directly in a single file database.

** Language

We use standard SQL language as defined in the [[http://www.sqlite.org/lang.html][SQLite documentation]], with some
extensions.
TODO: define extensions.

Reference: [[http://evalenzu.mat.utfsm.cl/Docencia/2012/SQLite.pdf][The Definitive Guide to SQLite]] explains how to implement extensions.

** Database structure

TODO: For now, please watch the following SQL specification:

https://github.com/wetube/bitcloud/blob/master/src/c/nodepool.sql

** Sync process

TODO

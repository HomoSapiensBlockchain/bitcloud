#+STARTUP: align fold hidestars indent

* Introduction
Bitcloud provides a method for storing data in a distributed collection of
nodes or meshnetwork and is comprised of these main components:

1. A method to reliably distribute data across connected nodes using Bitcloud,
   with the potential to scale up to millions of nodes.
2. Hot plug-in/plug-out of nodes.
3. Safeguard of the data, such as given N number of nodes, only N/3 of them
   are needed to provide the complete file.
4. Fast parallel reconstruction of files.
5. QoS measurement of individual nodes and node grids, with statistics stored
   in a node pool file.
6. Automatic Certificate Authorities (CA) management, for secure reliable
   connections.
7. Each node and user is associated with a CA managed by a gateway or publisher.
8. Difficult generation and global acceptance of CAs encouraged by a
   reputation system.
9. Secure encrypted storage in such a way that individual nodes cannot know
   what they are storing by simple prospecting into the data.
10. Arrangement of the nodes in grids, each grid providing specialized content
    storage for contract publishers.
11. Both public and private grids can coexist.
12. The public grid is the collection of all the nodes in the entire Bitcloud
    and its content cannot be censored.
13. Private grids are managed by publishers, in charge of curating the content.


This document defines the Bitcloud organization and methodology and is a work
in progress. We ask you for your help and comments. You can submit your
inquiries:

https://github.com/wetube/bitcloud/issues?state=open

http://talk.bitcloudproject.org/index.php?board=1.0


* Structure graph

# #+BEGIN_SRC plantuml :file "img/structure.png"
# node NodeGrid1 {
# node Gateway1
# node Gateway2
# database "Storage Nodes" as storage1 {
# node Node1
# node Node2
# node Node3
# node Node4
# }
# Gateway1 <-> storage1
# Gateway2 <-> storage1
# }
# node Publisher
# Publisher <-down-> NodeGrid1 : Escrow

# :User1:     <-> Gateway1
# :User1:     <-> Gateway2

# :User1:    <-> Publisher : DAO

# #+END_SRC

#+RESULTS:
[[file:img/structure.png]]


* Tahoe-LAFS like filesystem

https://tahoe-lafs.org/trac/tahoe-lafs/browser/trunk/docs/architecture.rst

** Modifications

A Tahoe-LAFS filesystem with the following modifications baked in:

- A superset to the networking layer, where a mesh topology may be allowed.  Each storage node shall have a dedicated tunnel to an affiliated gateway.
- Each grid shall be defined by one or more gateways, which shall be certified in the overall bitcloud as certificate authorities
- Certificate authorities shall have the capability to merge their authorities by signing each others' certificates, thus providing redundancy of operations in case of one gateway going down
- Storage nodes may submit bids upon polling by a gateway for content slice hosting
- Content shall be stored in nodes with k-of-N encryption, based on the number of nodes required to effectively host the content of that size.
- Gateways shall mediate transactions between prospective content depositors and nodes, polling their associated nodes to determine the minimum price the grid can offer for the content storage for the guaranteed time period.
- Node QoS guarantees shall be adjudicated based on a node's contributions to a public grid, for which every CA shall be a valid gateway. This will require that nodes present a portion of their storage to the public grid. Public grid storage will have no particular guarantee beyond the node's desire to present good QoS figures.
- Gateways will account for and verify user downloads of content slices, reporting to the nodepool which nodes had successfully completed their obligations.
- Gateways will act as escrow agents to render payment credits to parties who have earned payments, if any.
- Gateways shall maintain certificate revocation lists to exclude malfunctioning or malicious nodes and gateways that would otherwise be associated with their grid.
- Nodes shall be required to associate with one or more affiliated gateways to be present on a grid.

Gateways will also be required for collections of users who do not wish to fulfill the requisites to act as CAs in their own right.

** Advantages:

- Measurement of a node's capability to serve content will be continuous and ongoing
- Free publication of content will be possible to allow underserved communities to be heard
- Publishers may solicit competing bids for hosting to allow market forces to provide guaranteed hosting according to expense of hosting
- Individual nodes will have no access to their served content, meaning sensitive or valuable information may be stored without worries it will be leaked or pirated.  
- With a k-of-N encryption scheme, nodes will not actually possess any content that may be problematic in their jurisdiction, as each node is restricted to one slice which is not possible to use to gain access to the content without k other slices
- Clusters of nodes tied to affiliated publishers may act towards a common interest, providing specialized content, making the job of those moderators who direct users to content much easier
- Expiring content hosting guarantees provide continuous income streams to nodes, thus attracting more nodes
- Multiple coexistent grids provide redundancy of operations in the event that some portion of nodes and/or gateways are unable to operate; nodes or gateways may affiliate with other grids in order to resume operations
- QoS measurements based on actual traffic provide historical trends for individual nodes. Nodes that attempt to game the system by means of Sibyls grabbing their hosted content, assuming they find a means of determining what that content is, will be 'buying' their improved rating due to having to gain the services of other, non-sibyled nodes. 
- Reliability of content retrieval is vastly increased due to the nature of k-of-N storage schemes, similar to how a RAID works
- Retrieval speed may be positively affected, similar to how bittorrent allows for vastly increased download speeds due to concurrently accessing slices of content spread across multiple users
- Accounting for individual downloads of content means charging for content becomes trivial to implement

** Disadvantages

- Controversial, harmful (malware) and illegal content will be posted on the public grid--though the source as far as the CA that authorized the user in question to post it will be determinable.
- Distributed CA registration will need to be difficult enough to make registration of a new CA expensive enough to encourage careful management of nodes and/or users
- Mesh topologies may suffer from reduced speed when tunneled through another content-serving node. Unexpected topological effects may result.
- Prospective scam nodes may be able to 'take the money and run' when issued content, taking payment for hosting and then disassociating from the grid. 

(N.B. that the "shall" and "may" used in the description section are according to RFC standards: SHALL and SHALL NOT are mandatory; MAY is optional)

* Certificate Authorities

Certificate authorities (CAs) certifies the ownership of public keys to relay
upon assertions to define trust/untrust relationships between components of
the system. The main uses are:

- To certify that a storage node is assigned to a gateway.
- To ensure that a storage node doesn't gain access to data it is not allowed
  to store.
- To certify the registration precedents of users, and therefore grant or deny
  access to specific content.
- To establish relationships between CAs that trust between them.
- To revoke access to malicious contenders.

** CA creation

Bitcloud do not use a classical centralized scheme in which only a few of CAs
are widely trusted. In contrast, every gateway and publisher is in charge of
generating its own CA and maintain a reputation in order to be accepted by the
community.

The Sybil attack is an attack wherein a reputation system is subverted by
forging identities in peer-to-peer networks at a high rate.

Classical centralized CA schemes avoid Sybil attacks by hosting
trusted/revoked certifications in already well-reputable certificate vendors,
at the expense of human resources to verify identity.

Bitcloud is an automatic decentralized storage system that intents to avoid
centralization, and relay in other means to verify correctness:

- By making expensive to generate new acceptable CAs, a new gateway or
  publisher must "mine" their CA by soliciting a CPU/memory hard problem to
  resolve and provide the solution associated with the CA generated.
- By maintaining a reputation of good QoS as promised.
- By staying online with good reputation, meaning that after a period of time
  offline the certificate is automatically revoked by the community.
- By providing a method of public/private individual revocation based on
  decisions from the publishers and gateways.
  
** CA trust/revocation

To encourage the accomplish of the obligations, Bitcloud maintains a general
synced file called the Node Pool, with statistics associated with each precise
CA. Every node is in charge to publicly/privately trust or revoke other CAs
based on such statistics.

Revocations based on poor QoS are publicly published in the node pool. Private
decisions based on private concerns not associated with QoS are kept private
to the gateway or publisher.

When a gateway is offered to work for the public grid, private revocations
are not to be considered.
